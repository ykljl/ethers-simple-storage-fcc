//代码准则:1.注意标点符号是否错了,或多了,或少了2.注意某些命令是否确实某个字母3.注意代码是否闭合(少了个括号或者}号)4.注意导入库,模块,文件的版本与位置

//该脚本主题:用原始的方法,进行交易
//使用const让ethers变量无法改变,引入ethers包,获取能读取私钥的功能函数
const ethers = require("ethers");

//引入fs-extra包,获取能读取api与二进制文件的功能函数
const fs = require("fs-extra");
//import fs from "fs-extra";

async function main() {
  //连接到本地区块链,地址为HTTP://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(
    "http://172.30.16.1:7545"
  );

  console.log("已连接到本地区块链!");

  // 连接到本地 Ganache 网络
  // 私钥（不要硬编码在代码中，实际项目请使用 .env 文件）
  const privateKey =
    "0x49613bcc7827416a1c0955ffc915a4b726fdc0a1eb5889a89be1a6ad4a237b1c";

  // 从私钥创建钱包并连接 provider
  const wallet = new ethers.Wallet(privateKey, provider);
  console.log("已连接到钱包!");

  //读取abi文件
  //abi文件是合约编译后生成的,包含合约的函数与变量,abi文件是json格式的,可以用fs-extra包读取
  //源代码:const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const abi = JSON.parse(
    fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
  );
  console.log("已读取abi!");

  //读取二进制文件,二进制文件是合约编译后生成的,包含合约的字节码,二进制文件是utf8格式的,可以用fs-extra包读取
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  console.log("已读取二进制文件!");
  // 创建合约工厂,合约工厂是用来部署合约的,需要传入abi与二进制文件,合约工厂是一个类,可以用来创建合约实例,需要传入abi与二进制文件,合约实例是合约的一个对象,可以用来调用合约的函数与变量
  // abi让代码制定怎么跟合约交互,binary让代码知道合约的字节码,wallet提供一个私钥让我们能够用它签名并部署这个合约
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  //原始的交易数据填写方法...
  const nonce = await wallet.getTransactionCount();
  tx = {
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 6721975,
    to: null,
    value: 0,
    data: "0x6080604052348015600e575f80fd5b506108d88061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80632e64cec1146100595780636057361d146100775780636f760f41146100935780638bab8dd5146100af5780639e7a13ad146100df575b5f80fd5b610061610110565b60405161006e919061029f565b60405180910390f35b610091600480360381019061008c91906102f3565b610118565b005b6100ad60048036038101906100a8919061045a565b610121565b005b6100c960048036038101906100c491906104b4565b6101a5565b6040516100d6919061029f565b60405180910390f35b6100f960048036038101906100f491906102f3565b6101d2565b60405161010792919061055b565b60405180910390f35b5f8054905090565b805f8190555050565b6001604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0155602082015181600101908161017b9190610783565b5050508060028360405161018f919061088c565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b600181815481106101e1575f80fd5b905f5260205f2090600202015f91509050805f015490806001018054610206906105b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610232906105b6565b801561027d5780601f106102545761010080835404028352916020019161027d565b820191905f5260205f20905b81548152906001019060200180831161026057829003601f168201915b5050505050905082565b5f819050919050565b61029981610287565b82525050565b5f6020820190506102b25f830184610290565b92915050565b5f604051905090565b5f80fd5b5f80fd5b6102d281610287565b81146102dc575f80fd5b50565b5f813590506102ed816102c9565b92915050565b5f60208284031215610308576103076102c1565b5b5f610315848285016102df565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61036c82610326565b810181811067ffffffffffffffff8211171561038b5761038a610336565b5b80604052505050565b5f61039d6102b8565b90506103a98282610363565b919050565b5f67ffffffffffffffff8211156103c8576103c7610336565b5b6103d182610326565b9050602081019050919050565b828183375f83830152505050565b5f6103fe6103f9846103ae565b610394565b90508281526020810184848401111561041a57610419610322565b5b6104258482856103de565b509392505050565b5f82601f8301126104415761044061031e565b5b81356104518482602086016103ec565b91505092915050565b5f80604083850312156104705761046f6102c1565b5b5f83013567ffffffffffffffff81111561048d5761048c6102c5565b5b6104998582860161042d565b92505060206104aa858286016102df565b9150509250929050565b5f602082840312156104c9576104c86102c1565b5b5f82013567ffffffffffffffff8111156104e6576104e56102c5565b5b6104f28482850161042d565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61052d826104fb565b6105378185610505565b9350610547818560208601610515565b61055081610326565b840191505092915050565b5f60408201905061056e5f830185610290565b81810360208301526105808184610523565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105cd57607f821691505b6020821081036105e0576105df610589565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610607565b61064c8683610607565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61068761068261067d84610287565b610664565b610287565b9050919050565b5f819050919050565b6106a08361066d565b6106b46106ac8261068e565b848454610613565b825550505050565b5f90565b6106c86106bc565b6106d3818484610697565b505050565b5b818110156106f6576106eb5f826106c0565b6001810190506106d9565b5050565b601f82111561073b5761070c816105e6565b610715846105f8565b81016020851015610724578190505b610738610730856105f8565b8301826106d8565b50505b505050565b5f82821c905092915050565b5f61075b5f1984600802610740565b1980831691505092915050565b5f610773838361074c565b9150826002028217905092915050565b61078c826104fb565b67ffffffffffffffff8111156107a5576107a4610336565b5b6107af82546105b6565b6107ba8282856106fa565b5f60209050601f8311600181146107eb575f84156107d9578287015190505b6107e38582610768565b86555061084a565b601f1984166107f9866105e6565b5f5b82811015610820578489015182556001820191506020850194506020810190506107fb565b8683101561083d5784890151610839601f89168261074c565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f610866826104fb565b6108708185610852565b9350610880818560208601610515565b80840191505092915050565b5f610897828461085c565b91508190509291505056fea26469706673582212206708716f4c8f4b634bb6d3d0978ef6f1a28ad9cec4719b5a3254217fd8371e3c64736f6c634300081a0033",
    chainId: 1337,
  };
  const signedTxRespomse = await wallet.sendTransaction(tx);
  console.log("合约部署完成！", signedTxRespomse);
}
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
